plugins {
    id 'java'
}

repositories {
    mavenLocal()
    maven {
        url = 'https://repo.runelite.net'
    }
    mavenCentral()
}

def runeLiteVersion = 'latest.release'

dependencies {
    compileOnly group: 'net.runelite', name:'client', version: runeLiteVersion

    compileOnly 'org.projectlombok:lombok:1.18.4'
    annotationProcessor 'org.projectlombok:lombok:1.18.4'

    // OkHttp and Gson are already included in RuneLite client, but we declare them for compilation
    compileOnly 'com.squareup.okhttp3:okhttp:4.9.1'
    compileOnly 'com.google.code.gson:gson:2.8.9'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.slf4j:slf4j-simple:1.7.12'
    testImplementation group: 'net.runelite', name:'client', version: runeLiteVersion, {
        exclude group: 'ch.qos.logback', module: 'logback-classic'
    }
}

group = 'codepanter.anotherbronzemanmode'
version = '1.2'
sourceCompatibility = '1.8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'

    // Add JVM arguments for Lombok to work with Java 17+
    options.forkOptions.jvmArgs += [
            '--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.jvm=ALL-UNNAMED'
    ]
}

// Ensure runelite-plugin.properties is included in the JAR
jar {
    from('.')  {
        include 'runelite-plugin.properties'
    }
}

task createProperties(dependsOn: processResources) {
    doLast {
        def bronzeFile = layout.buildDirectory.file("resources/main/anotherbronzemanmode_version.txt").get().asFile
        bronzeFile.text = "version=$project.version"
    }
}

classes {
    dependsOn createProperties
}